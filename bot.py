import os
import json
import time
import logging
import telebot
import gspread

from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
creds_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

AUTHORIZED_USERS = [123456789]  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π Telegram ID

bot = telebot.TeleBot(BOT_TOKEN)

# ================ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =============== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets ===============
creds = Credentials.from_service_account_info(
    json.loads(creds_json),
    scopes=["https://www.googleapis.com/auth/spreadsheets.readonly "]
)
gs = gspread.authorize(creds)
sheet = gs.open_by_url(SPREADSHEET_URL).sheet1

cached_roses = []

def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# =============== –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏–π ===============
user_messages = {}

def delete_previous_messages(chat_id):
    if chat_id in user_messages:
        for msg_id in user_messages[chat_id]:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        user_messages[chat_id] = []

def send_typing_action(chat_id):
    bot.send_chat_action(chat_id, 'typing')
    time.sleep(0.8)

# =============== –ö–æ–º–∞–Ω–¥—ã ===============
@bot.message_handler(commands=['start'])
def send_welcome(message):
    delete_previous_messages(message.chat.id)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîé –ü–æ–∏—Å–∫"), KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥"))
    markup.row(KeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    msg = bot.send_message(message.chat.id, "üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode='HTML', reply_markup=markup)
    user_messages[message.chat.id].append(msg.message_id)

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id,
                     "üí¨ –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑–∞—Ö.\n"
                     "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.\n"
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                     "/help ‚Äî –ø–æ–º–æ—â—å\n"
                     "/refresh ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")

@bot.message_handler(commands=['refresh'])
def refresh_data(message):
    if message.from_user.id not in AUTHORIZED_USERS:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    refresh_cached_roses()
    bot.send_message(message.chat.id, "üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

# =============== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===============
@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def handle_search(message):
    delete_previous_messages(message.chat.id)
    msg = bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã:")
    user_messages[message.chat.id].append(msg.message_id)

@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def handle_help(message):
    delete_previous_messages(message.chat.id)
    msg = bot.send_message(message.chat.id, "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @your_username")
    user_messages[message.chat.id].append(msg.message_id)

@bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
def handle_order(message):
    delete_previous_messages(message.chat.id)
    msg = bot.send_message(message.chat.id, "üõí –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç.")
    user_messages[message.chat.id].append(msg.message_id)

@bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
def handle_catalog(message):
    delete_previous_messages(message.chat.id)
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("–ß–∞–π–Ω–æ-–≥–∏–±—Ä–∏–¥–Ω—ã–µ", callback_data="type_–ß–∞–π–Ω–æ-–≥–∏–±—Ä–∏–¥–Ω—ã–µ"),
        InlineKeyboardButton("–ü–ª–µ—Ç–∏—Å—Ç—ã–µ", callback_data="type_–ü–ª–µ—Ç–∏—Å—Ç—ã–µ"),
        InlineKeyboardButton("–ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã–µ", callback_data="type_–ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã–µ"),
        InlineKeyboardButton("–§–ª–æ—Ä–∏–±—É–Ω–¥–∞", callback_data="type_–§–ª–æ—Ä–∏–±—É–Ω–¥–∞"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ]
    keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã:", reply_markup=keyboard)
    user_messages[message.chat.id].append(msg.message_id)

# =============== Callbacks ===============
@bot.callback_query_handler(func=lambda call: call.data.startswith("type_"))
def handle_type(call):
    rose_type = call.data.replace("type_", "")
    roses = [r for r in cached_roses if r.get('–¢–∏–ø') == rose_type]
    if not roses:
        bot.answer_callback_query(call.id, "–ù–µ—Ç —Ä–æ–∑ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for idx, rose in enumerate(roses):
        keyboard.add(InlineKeyboardButton(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'), callback_data=f"rose_{idx}_{rose_type}"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_catalog"))

    bot.edit_message_text("üåº –†–æ–∑—ã —ç—Ç–æ–≥–æ —Ç–∏–ø–∞:", call.message.chat.id, call.message.message_id, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("rose_"))
def handle_rose(call):
    _, idx, rose_type = call.data.split("_")
    idx = int(idx)
    roses = [r for r in cached_roses if r.get('–¢–∏–ø') == rose_type]
    if idx >= len(roses):
        bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    rose = roses[idx]
    caption = f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n{rose.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"

    photo_url = rose.get('photo', 'https://example.com/default.jpg ')

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{idx}_{rose_type}"),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{idx}_{rose_type}"),
        InlineKeyboardButton("üìπ –í–∏–¥–µ–æ", callback_data=f"video_{idx}_{rose_type}"),
        InlineKeyboardButton("üì¶ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"description_{idx}_{rose_type}"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"type_{rose_type}")
    )

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass

    msg = bot.send_photo(
        call.message.chat.id,
        photo_url,
        caption=caption,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    user_messages[call.message.chat.id].append(msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_menu"))
def handle_back_to_menu(call):
    delete_previous_messages(call.message.chat.id)
    send_welcome(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_catalog"))
def handle_back_to_catalog(call):
    handle_catalog(call.message)

# =============== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑–µ ===============
@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_", "video_", "description_")))
def handle_rose_details(call

bot.infinity_polling()
