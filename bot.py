import os
import time
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
creds_json = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

# =============== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =============== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===============
bot = telebot.TeleBot(BOT_TOKEN)

# =============== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets ===============
try:
    creds = Credentials.from_service_account_info(
        creds_json,
        scopes=["https://www.googleapis.com/auth/spreadsheets.readonly "]
    )
    gs = gspread.authorize(creds)
    sheet = gs.open_by_url(SPREADSHEET_URL).sheet1
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    raise

# =============== –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===============
cached_roses = []

def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# =============== –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏–π ===============
user_messages = {}

def delete_previous_messages(chat_id):
    if chat_id in user_messages:
        for msg_id in user_messages[chat_id]:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        user_messages[chat_id] = []
    else:
        user_messages[chat_id] = []  # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# =============== –ö–æ–º–∞–Ω–¥—ã ===============
@bot.message_handler(commands=['start'])
def send_welcome(message):
    delete_previous_messages(message.chat.id)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîé –ü–æ–∏—Å–∫"), KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥"))
    markup.row(KeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    msg = bot.send_message(message.chat.id,
                           "üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                           parse_mode='HTML',
                           reply_markup=markup)
    user_messages[message.chat.id].append(msg.message_id)

# === –í–°–ï –¢–í–û–ò –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï HANDLER'–´ ===
# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏: handle_search, callback_query_handler –∏ —Ç.–¥.

# =============== Webhook endpoint ===============
app = Flask(__name__)

@app.route('/telegram', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# =============== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook ===============
@app.before_first_request
def set_bot_webhook():
    try:
        bot.remove_webhook()
        time.sleep(1)
        public_url = os.getenv("PUBLIC_URL") or f"https://{request.host}"
        webhook_url = f"{public_url}/telegram"
        bot.set_webhook(url=webhook_url)
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

# =============== –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===============
@app.route('/')
def index():
    return 'Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!', 200

# =============== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===============
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
