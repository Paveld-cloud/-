import os
import json
import logging
import telebot
import gspread
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from functools import lru_cache
from time import sleep

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SPREADSHEET_COLUMNS = {
    'NAME': '–ù–∞–∑–≤–∞–Ω–∏–µ',
    'DESCRIPTION': '–û–ø–∏—Å–∞–Ω–∏–µ',
    'PRICE': '–¶–µ–Ω–∞',
    'PHOTO': '–§–æ—Ç–æ',
    'CARE': '–£—Ö–æ–¥',
    'HISTORY': '–ò—Å—Ç–æ—Ä–∏—è'
}
ROSES_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_FILE = os.getenv("GOOGLE_CREDS_FILE", "credentials.json")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([BOT_TOKEN, SPREADSHEET_URL, CREDS_FILE]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å BOT_TOKEN, SPREADSHEET_URL –∏ GOOGLE_CREDS_FILE –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
try:
    creds = Credentials.from_service_account_file(
        CREDS_FILE,
        scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
    )
    gs = gspread.authorize(creds)
    sheet = gs.open_by_url(SPREADSHEET_URL).sheet1
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    raise

@lru_cache(maxsize=1)
def get_roses():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑–∞—Ö –∏–∑ Google Sheets."""
    try:
        data = sheet.get_all_records()
        if not data:
            logger.warning("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
            return []
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def create_rose_card(rose):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üåø –£—Ö–æ–¥", callback_data=f"care_{rose[SPREADSHEET_COLUMNS['NAME']]}"),
        InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{rose[SPREADSHEET_COLUMNS['NAME']]}")
    )
    caption = (
        f"<b>{rose[SPREADSHEET_COLUMNS['NAME']]}</b>\n"
        f"{rose.get(SPREADSHEET_COLUMNS['DESCRIPTION'], '')}\n"
        f"–¶–µ–Ω–∞: {rose[SPREADSHEET_COLUMNS['PRICE']]}"
    )
    return caption, markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ /all –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ä–æ–∑."
    )

@bot.message_handler(commands=['all'])
def show_all_roses(message):
    roses = get_roses()
    if not roses:
        bot.send_message(message.chat.id, "üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑–∞—Ö.")
        return

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    try:
        page = int(message.text.split()[1]) if len(message.text.split()) > 1 else 1
        total_pages = (len(roses) + ROSES_PER_PAGE - 1) // ROSES_PER_PAGE
        if page < 1 or page > total_pages:
            bot.send_message(message.chat.id, f"üö´ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{total_pages}")
            return
    except ValueError:
        page = 1

    start_idx = (page - 1) * ROSES_PER_PAGE
    end_idx = start_idx + ROSES_PER_PAGE

    for rose in roses[start_idx:end_idx]:
        try:
            caption, markup = create_rose_card(rose)
            bot.send_photo(
                message.chat.id,
                photo=rose[SPREADSHEET_COLUMNS['PHOTO']],
                caption=caption,
                parse_mode='HTML',
                reply_markup=markup
            )
            sleep(0.5)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–∑—ã {rose[SPREADSHEET_COLUMNS['NAME']]}: {e}")
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–æ–∑—ã {rose[SPREADSHEET_COLUMNS['NAME']]}")

    if total_pages > 1:
        bot.send_message(
            message.chat.id,
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}. –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: /all <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>"
        )

@bot.message_handler(func=lambda m: True)
def search_rose(message):
    query = message.text.strip().lower()
    roses = get_roses()
    if not roses:
        bot.send_message(message.chat.id, "üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑–∞—Ö.")
        return

    # –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
    matches = [rose for rose in roses if query in rose[SPREADSHEET_COLUMNS['NAME']].lower()]
    if not matches:
        bot.send_message(message.chat.id, "üö´ –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    for rose in matches[:ROSES_PER_PAGE]:
        try:
            caption, markup = create_rose_card(rose)
            bot.send_photo(
                message.chat.id,
                photo=rose[SPREADSHEET_COLUMNS['PHOTO']],
                caption=caption,
                parse_mode='HTML',
                reply_markup=markup
            )
            sleep(0.5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–∑—ã {rose[SPREADSHEET_COLUMNS['NAME']]}: {e}")
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–æ–∑—ã {rose[SPREADSHEET_COLUMNS['NAME']]}")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    roses = get_roses()
    if not roses:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑–∞—Ö")
        return

    try:
        action, name = call.data.split('_', 1)
        rose = next((r for r in roses if r[SPREADSHEET_COLUMNS['NAME']] == name), None)
        if not rose:
            bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if action == 'care':
            bot.send_message(
                call.message.chat.id,
                f"üåø –£—Ö–æ–¥ –∑–∞ {name}:\n{rose[SPREADSHEET_COLUMNS['CARE']]}"
            )
            bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ö–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        elif action == 'history':
            bot.send_message(
                call.message.chat.id,
                f"üìñ –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã {name}:\n{rose[SPREADSHEET_COLUMNS['HISTORY']]}"
            )
            bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {call.data}: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        try:
            bot.infinity_polling()
        except Exception as e:
            logger.error(f"–ë–æ—Ç —É–ø–∞–ª: {e}")
            sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
