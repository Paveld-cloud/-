# bot.py ‚Äî Telegram –±–æ—Ç –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–æ–∑ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–£—Ö–æ–¥" –∏ "–ò—Å—Ç–æ—Ä–∏—è" + –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

import os
import telebot
import gspread
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
creds_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

bot = telebot.TeleBot(BOT_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(eval(creds_json), scopes=[
    "https://www.googleapis.com/auth/spreadsheets.readonly"])
gs = gspread.authorize(creds)
sheet = gs.open_by_url(SPREADSHEET_URL).sheet1  # –ª–∏—Å—Ç —Å —Ä–æ–∑–∞–º–∏

def get_roses():
    return sheet.get_all_records()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /all –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö.")

@bot.message_handler(commands=['all'])
def show_all_roses(message):
    roses = get_roses()
    for rose in roses:
        send_rose_card(message.chat.id, rose)

@bot.message_handler(func=lambda m: True)
def search_rose(message):
    query = message.text.strip().lower()
    roses = get_roses()
    rose = next((r for r in roses if r['–ù–∞–∑–≤–∞–Ω–∏–µ'].lower() == query), None)

    if not rose:
        bot.send_message(message.chat.id, "üö´ –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    send_rose_card(message.chat.id, rose)

def send_rose_card(chat_id, rose):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üåø –£—Ö–æ–¥", callback_data=f"care_{rose['–ù–∞–∑–≤–∞–Ω–∏–µ']}"),
        InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{rose['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
    )
    caption = f"<b>{rose['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\n{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n–¶–µ–Ω–∞: {rose['–¶–µ–Ω–∞']}"
    bot.send_photo(
        chat_id,
        photo=rose['–§–æ—Ç–æ'],
        caption=caption,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    roses = get_roses()
    name = call.data.split('_')[1]
    rose = next((r for r in roses if r['–ù–∞–∑–≤–∞–Ω–∏–µ'] == name), None)
    if not rose:
        bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    if call.data.startswith('care_'):
        bot.send_message(call.message.chat.id, f"üåø –£—Ö–æ–¥ –∑–∞ {name}:\n{rose['–£—Ö–æ–¥']}")
    elif call.data.startswith('history_'):
        bot.send_message(call.message.chat.id, f"üìñ –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã {name}:\n{rose['–ò—Å—Ç–æ—Ä–∏—è']}")

if __name__ == '__main__':
    bot.infinity_polling()
